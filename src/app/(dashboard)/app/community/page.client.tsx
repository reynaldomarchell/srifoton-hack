"use client";

import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Checkbox } from "@/components/ui/checkbox";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { AnimatePresence, motion } from "framer-motion";
import Link from "next/link";
import React from "react";
import { FaRobot, FaStopwatch, FaUserCheck } from "react-icons/fa";
import { LuBookOpen } from "react-icons/lu";
import { type CommunityClientProps } from "~/types/community";

const getScoreColor = (score: number, total: number) => {
  if (score === total) return "bg-green-500";
  if (score >= 0.4 * total && score <= 0.7 * total) return "bg-yellow-500";
  return "bg-red-500";
};

export function CommunityClient({
  initialQuizzes,
  initialQuizAttemptsMap: quizAttemptsMap,
}: CommunityClientProps) {
  const [quizzes, setQuizzes] = React.useState(initialQuizzes);
  const [filters, setFilters] = React.useState({
    verifiedByExpert: false,
    generatedByAI: false,
    attempted: false,
  });

  const filteredQuizzes = React.useMemo(() => {
    return initialQuizzes.filter((quiz) => {
      if (filters.verifiedByExpert && !quiz.isVerifiedByExpert) {
        return false;
      }
      if (filters.generatedByAI && !quiz.isGeneratedByAI) {
        return false;
      }
      if (filters.attempted && !quizAttemptsMap[quiz.id]?.length) {
        return false;
      }
      return true;
    });
  }, [initialQuizzes, filters, quizAttemptsMap]);

  React.useEffect(() => {
    if (filteredQuizzes) {
      setQuizzes(filteredQuizzes);
    }
  }, [filteredQuizzes]);

  const handleFilterChange = (
    filterName: "verifiedByExpert" | "generatedByAI" | "attempted",
  ) => {
    setFilters((prev) => ({
      ...prev,
      [filterName]: !prev[filterName],
    }));
  };

  return (
    <>
      <div className="mb-6 flex flex-wrap gap-4">
        <div className="flex items-center space-x-2">
          <Checkbox
            id="verifiedByExpert"
            checked={filters.verifiedByExpert}
            onCheckedChange={() => handleFilterChange("verifiedByExpert")}
          />
          <label
            htmlFor="verifiedByExpert"
            className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
          >
            Verified by Expert
          </label>
        </div>
        <div className="flex items-center space-x-2">
          <Checkbox
            id="generatedByAI"
            checked={filters.generatedByAI}
            onCheckedChange={() => handleFilterChange("generatedByAI")}
          />
          <label
            htmlFor="generatedByAI"
            className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
          >
            Generated by AI
          </label>
        </div>
        <div className="flex items-center space-x-2">
          <Checkbox
            id="attempted"
            checked={filters.attempted}
            onCheckedChange={() => handleFilterChange("attempted")}
          />
          <label
            htmlFor="attempted"
            className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
          >
            Attempted
          </label>
        </div>
      </div>
      {quizzes.length === 0 ? (
        <div className="flex items-center justify-center text-lg text-muted-foreground">
          No quizzes found with the selected filters.
        </div>
      ) : (
        <AnimatePresence>
          <motion.div
            className="grid gap-6 sm:grid-cols-2 lg:grid-cols-3"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            transition={{ duration: 0.5 }}
          >
            {quizzes.map((quiz) => (
              <motion.div
                key={quiz.id}
                layout
                initial={{ opacity: 0, scale: 0.9 }}
                animate={{ opacity: 1, scale: 1 }}
                exit={{ opacity: 0, scale: 0.9 }}
                transition={{ duration: 0.3 }}
              >
                <Card className="group flex h-full flex-col overflow-hidden transition-all duration-300 hover:shadow-lg">
                  <CardHeader>
                    <CardTitle className="line-clamp-2">{quiz.theme}</CardTitle>
                  </CardHeader>
                  <CardContent className="flex-grow">
                    <div className="mb-4 flex flex-wrap gap-2 text-sm">
                      <div className="flex items-center gap-2">
                        <FaStopwatch
                          className="text-yellow-400"
                          aria-hidden="true"
                        />
                        <p>{quiz.totalQuestions} questions</p>
                      </div>
                      <div className="flex items-center gap-2">
                        <LuBookOpen
                          className="text-green-500"
                          aria-hidden="true"
                        />
                        <p>{quiz.workingTime} minutes</p>
                      </div>
                      {quiz.isVerifiedByExpert && (
                        <Badge
                          variant="secondary"
                          className="flex items-center gap-1"
                        >
                          <FaUserCheck className="h-3 w-3" />
                          Expert Verified
                        </Badge>
                      )}
                      {quiz.isGeneratedByAI && (
                        <Badge
                          variant="outline"
                          className="flex items-center gap-1"
                        >
                          <FaRobot className="h-3 w-3" />
                          AI Generated
                        </Badge>
                      )}
                    </div>
                    <p className="text-sm text-muted-foreground">
                      Created by: {quiz.createdBy.name}
                    </p>
                    <motion.div
                      className="mt-4 border-t pt-4"
                      initial={{ height: 0, opacity: 0 }}
                      animate={{ height: "auto", opacity: 1 }}
                      transition={{ duration: 0.3 }}
                    >
                      <h3 className="mb-2 font-semibold">Your Attempts</h3>
                      {quizAttemptsMap[quiz.id]?.length ? (
                        <ul className="space-y-2">
                          {quizAttemptsMap[quiz.id]
                            ?.slice(0, 3)
                            .map((attempt, index) => (
                              <li
                                key={attempt.id}
                                className="flex items-center justify-between text-sm"
                              >
                                <span className="font-medium">
                                  Attempt{" "}
                                  {(quizAttemptsMap[quiz.id]?.length ?? 0) -
                                    index}
                                  :
                                </span>
                                <div className="flex items-center gap-2">
                                  <Badge
                                    className={`${getScoreColor(
                                      attempt.score ?? 0,
                                      quiz.totalQuestions,
                                    )} text-white`}
                                  >
                                    {attempt.score ?? 0}/{quiz.totalQuestions}
                                  </Badge>
                                  <span className="text-xs text-muted-foreground">
                                    {new Date(
                                      attempt.startedAt,
                                    ).toLocaleDateString()}
                                  </span>
                                </div>
                              </li>
                            ))}
                        </ul>
                      ) : (
                        <p className="text-sm text-muted-foreground">
                          You haven&apos;t attempted this quiz yet
                        </p>
                      )}
                    </motion.div>
                  </CardContent>
                  <CardFooter className="flex justify-between">
                    <DropdownMenu>
                      <DropdownMenuTrigger asChild>
                        <Button variant="outline">Actions</Button>
                      </DropdownMenuTrigger>
                      <DropdownMenuContent align="end">
                        <DropdownMenuItem asChild>
                          <Link
                            href={`/app/quiz/${quiz.id}?src=/app/community`}
                          >
                            Start Quiz
                          </Link>
                        </DropdownMenuItem>
                        <DropdownMenuItem asChild>
                          <Link
                            href={`/app/quiz/${quiz.id}?mode=review&src=/app/community`}
                          >
                            Review
                          </Link>
                        </DropdownMenuItem>
                      </DropdownMenuContent>
                    </DropdownMenu>
                  </CardFooter>
                </Card>
              </motion.div>
            ))}
          </motion.div>
        </AnimatePresence>
      )}
    </>
  );
}
